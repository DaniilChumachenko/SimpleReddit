package com.chumachenko.simpleReddit.data.api.response.newrespose

import android.os.Parcelable
import com.chumachenko.simpleReddit.data.api.response.RedditItemRealm
import com.google.gson.annotations.SerializedName
import kotlinx.android.parcel.Parcelize

@Parcelize
class DataX(
    @SerializedName("all_awardings") val all_awardings: List<AllAwarding>?,
     @SerializedName("allow_live_comments") val allow_live_comments: Boolean?,
     @SerializedName("approved_at_utc") val approved_at_utc: String?,
     @SerializedName("approved_by") val approved_by: String?,
     @SerializedName("archived") val archived: Boolean?,
     @SerializedName("author") val author: String?,
     @SerializedName("author_flair_background_color") val author_flair_background_color: String?,
     @SerializedName("author_flair_css_class") val author_flair_css_class: String?,
     @SerializedName("author_flair_richtext") val author_flair_richtext: List<AuthorFlairRichtext>?,
     @SerializedName("author_flair_template_id") val author_flair_template_id: String?,
     @SerializedName("author_flair_text") val author_flair_text: String?,
     @SerializedName("author_flair_text_color") val author_flair_text_color: String?,
     @SerializedName("author_flair_type") val author_flair_type: String?,
     @SerializedName("author_fullname") val author_fullname: String?,
     @SerializedName("author_patreon_flair") val author_patreon_flair: Boolean?,
     @SerializedName("author_premium") val author_premium: Boolean?,
     @SerializedName("awarders") val awarders: List<String>?,
     @SerializedName("banned_at_utc") val banned_at_utc: String?,
     @SerializedName("banned_by") val banned_by: String?,
     @SerializedName("can_gild") val can_gild: Boolean?,
     @SerializedName("can_mod_post") val can_mod_post: Boolean?,
     @SerializedName("category") val category: String?,
     @SerializedName("clicked") val clicked: Boolean?,
//     @SerializedName("content_categories") val content_categories: String?,
     @SerializedName("contest_mode") val contest_mode: Boolean?,
     @SerializedName("created") val created: Double?,
     @SerializedName("created_utc") val created_utc: Double?,
     @SerializedName("discussion_type") val discussion_type: String?,
     @SerializedName("distinguished") val distinguished: String?,
     @SerializedName("domain") val domain: String?,
     @SerializedName("downs") val downs: Int?,
     @SerializedName("edited") val edited: Boolean?,
     @SerializedName("gilded") val gilded: Int?,
     @SerializedName("hidden") val hidden: Boolean?,
     @SerializedName("hide_score") val hide_score: Boolean?,
     @SerializedName("id") val id: String,
     @SerializedName("is_created_from_ads_ui") val is_created_from_ads_ui: Boolean?,
     @SerializedName("is_crosspostable") val is_crosspostable: Boolean?,
     @SerializedName("is_meta") val is_meta: Boolean?,
     @SerializedName("is_original_content") val is_original_content: Boolean?,
     @SerializedName("is_reddit_media_domain") val is_reddit_media_domain: Boolean?,
     @SerializedName("is_robot_indexable") val is_robot_indexable: Boolean?,
     @SerializedName("is_self") val is_self: Boolean?,
     @SerializedName("is_video") val is_video: Boolean?,
     @SerializedName("likes") val likes: String?,
     @SerializedName("link_flair_background_color") val link_flair_background_color: String?,
     @SerializedName("link_flair_css_class") val link_flair_css_class: String?,
     @SerializedName("link_flair_richtext") val link_flair_richtext: List<LinkFlairRichtext>?,
     @SerializedName("link_flair_template_id") val link_flair_template_id: String?,
     @SerializedName("link_flair_text") val link_flair_text: String?,
     @SerializedName("link_flair_text_color") val link_flair_text_color: String?,
     @SerializedName("link_flair_type") val link_flair_type: String?,
     @SerializedName("locked") val locked: Boolean?,
//     @SerializedName("media") val media: String?,
//   @SerializedName("all_awardings")   val media_embed: MediaEmbed,
     @SerializedName("media_only") val media_only: Boolean?,
     @SerializedName("mod_note") val mod_note: String?,
     @SerializedName("mod_reason_by") val mod_reason_by: String?,
     @SerializedName("mod_reason_title") val mod_reason_title: String?,
     @SerializedName("mod_reports") val mod_reports: List<String>?,
     @SerializedName("name") val name: String?,
     @SerializedName("no_follow") val no_follow: Boolean?,
     @SerializedName("num_comments") val num_comments: Int?,
     @SerializedName("num_crossposts") val num_crossposts: Int?,
     @SerializedName("num_reports") val num_reports: String?,
     @SerializedName("over_18") val over_18: Boolean?,
     @SerializedName("parent_whitelist_status") val parent_whitelist_status: String?,
     @SerializedName("permalink") val permalink: String?,
     @SerializedName("pinned") val pinned: Boolean?,
     @SerializedName("post_hint") val post_hint: String?,
     @SerializedName("preview") val preview: Preview?,
     @SerializedName("pwls") val pwls: Int?,
     @SerializedName("quarantine") val quarantine: Boolean?,
     @SerializedName("removal_reason") val removal_reason: String?,
     @SerializedName("removed_by") val removed_by: String?,
     @SerializedName("removed_by_category") val removed_by_category: String?,
     @SerializedName("report_reasons") val report_reasons: String?,
     @SerializedName("saved") val saved: Boolean?,
     @SerializedName("score") val score: Int?,
//     @SerializedName("secure_media") val secure_media: String?,
//   @SerializedName("all_awardings")   val secure_media_embed: SecureMediaEmbed,
     @SerializedName("selftext") val selftext: String?,
     @SerializedName("selftext_html") val selftext_html: String?,
     @SerializedName("send_replies") val send_replies: Boolean?,
     @SerializedName("spoiler") val spoiler: Boolean?,
     @SerializedName("stickied") val stickied: Boolean?,
     @SerializedName("subreddit") val subreddit: String?,
     @SerializedName("subreddit_id") val subreddit_id: String?,
     @SerializedName("subreddit_name_prefixed") val subreddit_name_prefixed: String?,
     @SerializedName("subreddit_subscribers") val subreddit_subscribers: Int?,
     @SerializedName("subreddit_type") val subreddit_type: String?,
     @SerializedName("suggested_sort") val suggested_sort: String?,
     @SerializedName("thumbnail") val thumbnail: String?,
     @SerializedName("thumbnail_height") val thumbnail_height: Int?,
     @SerializedName("thumbnail_width") val thumbnail_width: Int?,
     @SerializedName("title") val title: String,
     @SerializedName("top_awarded_type") val top_awarded_type: String?,
     @SerializedName("total_awards_received") val total_awards_received: Int?,
     @SerializedName("treatment_tags") val treatment_tags: List<String>?,
     @SerializedName("ups") val ups: Int?,
     @SerializedName("upvote_ratio") val upvote_ratio: Double?,
     @SerializedName("url") val url: String?,
     @SerializedName("url_overridden_by_dest") val url_overridden_by_dest: String?,
     @SerializedName("user_reports") val user_reports: List<String>?,
     @SerializedName("view_count") val view_count: String?,
     @SerializedName("visited") val visited: Boolean?,
     @SerializedName("whitelist_status") val whitelist_status: String?,
     @SerializedName("wls") val wls: Int?
): Parcelable {

 fun toRealm(): RedditItemRealm = RedditItemRealm(
   id,
   title,
   thumbnail,
   created_utc
  )
}